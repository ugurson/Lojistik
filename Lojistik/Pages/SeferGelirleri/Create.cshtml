@page
@model Lojistik.Pages.SeferGelirleri.CreateModel
@{
    ViewData["Title"] = "Sefer Geliri Ekle";
}

<h2 class="mb-3">Sefer Geliri Ekle</h2>

<form method="post" class="row g-3" autocomplete="off">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="Input.SeferID" />

    <div class="col-md-3">
        <label asp-for="Input.Tarih" class="form-label">Tarih</label>
        <div class="input-group">
            <input asp-for="Input.Tarih" type="date" class="form-control" />
            <button type="button" class="btn btn-outline-secondary" onclick="setToday()">Bugün</button>
        </div>
        <span asp-validation-for="Input.Tarih" class="text-danger"></span>
    </div>

    <div class="col-md-5">
        <label asp-for="Input.Aciklama" class="form-label">Açıklama</label>
        <input asp-for="Input.Aciklama" class="form-control" placeholder="Navlun / Bekleme / vb." />
        <span asp-validation-for="Input.Aciklama" class="text-danger"></span>
    </div>

    <div class="col-md-2">
        <label asp-for="Input.Tutar" class="form-label">Tutar</label>
        <div class="input-group">
            <input asp-for="Input.Tutar"
                   class="form-control"
                   type="text" />
            <button class="btn btn-outline-secondary" type="button" onclick="quick(500)">+500</button>
            <button class="btn btn-outline-secondary" type="button" onclick="quick(1000)">+1.000</button>
        </div>
        <div class="form-text">Virgül veya nokta kullanabilirsiniz (ör. 1.900,50).</div>
        <span asp-validation-for="Input.Tutar" class="text-danger"></span>
    </div>

    <div class="col-md-2">
        <label asp-for="Input.ParaBirimi" class="form-label">Para Birimi</label>
        <select asp-for="Input.ParaBirimi" asp-items="Model.PBSelect" class="form-select">
            <option value="">(Seç)</option>
        </select>
        <span asp-validation-for="Input.ParaBirimi" class="text-danger"></span>
    </div>

    <div class="col-md-6">
        <label asp-for="Input.IlgiliSiparisID" class="form-label">İlgili Sipariş</label>
        <select asp-for="Input.IlgiliSiparisID" asp-items="Model.SiparisSelect" class="form-select">
            <option value="">(Yok)</option>
        </select>
        <span asp-validation-for="Input.IlgiliSiparisID" class="text-danger"></span>
    </div>

    <div class="col-12">
        <label asp-for="Input.Notlar" class="form-label">Notlar</label>
        <textarea asp-for="Input.Notlar" rows="2" class="form-control"></textarea>
        <span asp-validation-for="Input.Notlar" class="text-danger"></span>
    </div>

    <div class="col-12 d-flex gap-2">
        <button class="btn btn-success" type="submit">Kaydet</button>
        <a asp-page="/Seferler/Details" asp-route-id="@Model.Input.SeferID" class="btn btn-outline-secondary">İptal</a>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Bugün düğmesi
        function setToday() {
            const d = new Date();
            const pad = n => n.toString().padStart(2, '0');
            const val = `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}`;
            document.querySelector('[name="Input.Tarih"]').value = val;
        }
        // Hızlı tutar ekleme
        function quick(n) {
            const el = document.querySelector('[name="Input.Tutar"]');
            if (!el) return;
            const toNum = v => parseFloat(String(v).replace(/\./g,'').replace(',', '.')) || 0;
            const cur = toNum(el.value);
            const next = cur + n;
            // TR gösterim
            el.value = next.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        }
        // TR ondalık (virgül) – jQuery validate override
        if (window.jQuery && $.validator && $.validator.methods) {
            $.validator.methods.number = function (value, element) {
                if (this.optional(element)) return true;
                return /^-?\d+(?:[.,]\d+)?$/.test(value);
            };
            $.validator.methods.range = function (value, element, param) {
                if (this.optional(element)) return true;
                const toNum = v => parseFloat(String(v).replace(/\./g,'').replace(',', '.'));
                const val = toNum(value), min = toNum(param[0]), max = toNum(param[1]);
                return !isNaN(val) && val >= min && val <= max;
            };
        }
    </script>
}
